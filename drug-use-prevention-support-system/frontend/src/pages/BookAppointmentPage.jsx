import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Typography, Card, Form, Input, DatePicker, Button, Row, Col, message,
  Avatar, Tag, Space, Modal, Spin, Radio, Select, Alert, Calendar, Badge
} from 'antd';
import {
  CalendarOutlined, ClockCircleOutlined, UserOutlined, PhoneOutlined, 
  MailOutlined, CheckCircleOutlined, ArrowLeftOutlined
} from '@ant-design/icons';
import dayjs from 'dayjs';
import authService from '../services/authService';
import { mockConsultants, mockAvailableSlots } from '../services/mockData';

const { Title, Paragraph, Text } = Typography;
const { Option } = Select;

function BookAppointmentPage() {
  const navigate = useNavigate();
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [consultants, setConsultants] = useState([]);
  const [selectedConsultant, setSelectedConsultant] = useState(null);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [loadingSlots, setLoadingSlots] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const [showCalendar, setShowCalendar] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [result, setResult] = useState('');
  const [form] = Form.useForm();

  useEffect(() => {
    checkAuthentication();
    loadConsultants();
  }, []);

  const checkAuthentication = () => {
    // Mock authentication for demo
    const mockUser = { id: 1, name: 'Demo User', email: 'demo@example.com' };
    setCurrentUser(mockUser);
  };

  const loadConsultants = async () => {
    try {
      setLoading(true);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Use mock data and add additional details
      const consultantsWithDetails = mockConsultants.map(consultant => ({
        ...consultant,
        specialty: consultant.expertise || 'T∆∞ v·∫•n t√¢m l√Ω',
        experience: getExperienceYears(consultant.createdAt),
        rating: (4.5 + Math.random() * 0.5).toFixed(1),
        price: 200000 + (consultant.id * 50000), // Different prices
        bio: generateBio(consultant.expertise),
        description: generateDescription(consultant.expertise)
      }));
      
      setConsultants(consultantsWithDetails);
    } catch (error) {
      console.error('Error loading consultants:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch t∆∞ v·∫•n vi√™n');
    } finally {
      setLoading(false);
    }
  };

  const loadAvailableSlots = async (consultantId, date) => {
    if (!consultantId || !date) return;
    
    try {
      setLoadingSlots(true);
      
      // Simulate API delay
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const formattedDate = dayjs(date).format('YYYY-MM-DD');
      const consultantSlots = mockAvailableSlots[consultantId];
      const slotsForDate = consultantSlots ? consultantSlots[formattedDate] || [] : [];
      
      setAvailableSlots(slotsForDate);
      
      if (slotsForDate.length === 0) {
        message.warning('Kh√¥ng c√≥ khung gi·ªù tr·ªëng cho ng√†y n√†y. Vui l√≤ng ch·ªçn ng√†y kh√°c.');
      }
    } catch (error) {
      console.error('Error loading available slots:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i khung gi·ªù tr·ªëng');
      setAvailableSlots([]);
    } finally {
      setLoadingSlots(false);
    }
  };

  const handleDateChange = (date) => {
    setSelectedDate(date);
    form.setFieldsValue({ appointmentDate: date, appointmentTime: null });
    
    if (selectedConsultant && date) {
      loadAvailableSlots(selectedConsultant.id, date);
    }
  };

  const handleSelectConsultant = (consultant) => {
    setSelectedConsultant(consultant);
    form.setFieldsValue({ consultantId: consultant.id });
    setAvailableSlots([]);
    setSelectedDate(null);
  };

  const handleSubmit = async (values) => {
    try {
      setLoading(true);
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock success response
      const success = Math.random() > 0.2; // 80% success rate
      
      if (success) {
        setResult('ƒê·∫∑t l·ªãch th√†nh c√¥ng!');
        message.success('ƒê·∫∑t l·ªãch h·∫πn th√†nh c√¥ng!');
      } else {
        setResult('ƒê·∫∑t l·ªãch th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i sau.');
        message.error('ƒê·∫∑t l·ªãch th·∫•t b·∫°i!');
      }
      
      setStep(2);
    } catch (error) {
      console.error('Error booking appointment:', error);
      setResult('ƒê·∫∑t l·ªãch th·∫•t b·∫°i! ' + error.message);
      setStep(2);
    } finally {
      setLoading(false);
    }
  };

  // Helper functions
  const getExperienceYears = (createdAt) => {
    const years = dayjs().diff(dayjs(createdAt), 'year');
    return Math.max(1, years + 2);
  };

  const generateBio = (expertise) => {
    const bios = {
      'T√¢m l√Ω h·ªçc': 'Chuy√™n gia t√¢m l√Ω v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c t∆∞ v·∫•n v√† ƒëi·ªÅu tr·ªã c√°c v·∫•n ƒë·ªÅ t√¢m l√Ω.',
      'Nghi·ªán ch·∫•t': 'B√°c sƒ© chuy√™n khoa v·ªÅ nghi·ªán ch·∫•t, c√≥ kinh nghi·ªám ƒëi·ªÅu tr·ªã v√† ph·ª•c h·ªìi cho ng∆∞·ªùi nghi·ªán.',
      'T∆∞ v·∫•n gia ƒë√¨nh': 'Chuy√™n gia t∆∞ v·∫•n gia ƒë√¨nh, gi√∫p gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ trong m·ªëi quan h·ªá gia ƒë√¨nh.',
      'default': 'Chuy√™n gia t∆∞ v·∫•n v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c ph√≤ng ch·ªëng t·ªá n·∫°n x√£ h·ªôi.'
    };
    return bios[expertise] || bios['default'];
  };

  const generateDescription = (expertise) => {
    const descriptions = {
      'T√¢m l√Ω h·ªçc': 'Chuy√™n v·ªÅ t√¢m l√Ω h·ªçc l√¢m s√†ng, t∆∞ v·∫•n t√¢m l√Ω cho thanh thi·∫øu ni√™n v√† ng∆∞·ªùi tr∆∞·ªüng th√†nh',
      'Nghi·ªán ch·∫•t': 'Chuy√™n m√¥n s√¢u v·ªÅ ƒëi·ªÅu tr·ªã nghi·ªán ch·∫•t, ph·ª•c h·ªìi ch·ª©c nƒÉng v√† t√°i h√≤a nh·∫≠p x√£ h·ªôi',
      'T∆∞ v·∫•n gia ƒë√¨nh': 'Chuy√™n gia v·ªÅ t∆∞ v·∫•n h√¥n nh√¢n gia ƒë√¨nh, gi·∫£i quy·∫øt xung ƒë·ªôt v√† c·∫£i thi·ªán m·ªëi quan h·ªá',
      'default': 'T∆∞ v·∫•n chuy√™n s√¢u v·ªÅ ph√≤ng ch·ªëng t·ªá n·∫°n x√£ h·ªôi v√† h·ªó tr·ª£ t√¢m l√Ω'
    };
    return descriptions[expertise] || descriptions['default'];
  };

  // Disable past dates and weekends
  const disabledDate = (current) => {
    const today = dayjs().startOf('day');
    const maxDate = dayjs().add(30, 'day');
    const isWeekend = current && (current.day() === 0 || current.day() === 6);
    
    return current && (
      current.isBefore(today) || 
      current.isAfter(maxDate) || 
      isWeekend
    );
  };

  // Generate time slots for selection
  const generateTimeSlots = () => {
    const slots = [];
    for (let hour = 8; hour < 18; hour++) {
      for (let minute = 0; minute < 60; minute += 15) {
        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        slots.push({
          value: timeString,
          label: timeString,
          disabled: !availableSlots.some(slot => slot.startTime === timeString)
        });
      }
    }
    return slots;
  };

  if (loading && consultants.length === 0) {
    return (
      <div style={{ textAlign: 'center', padding: '50px' }}>
        <Spin size="large" />
        <p style={{ marginTop: '16px' }}>ƒêang t·∫£i danh s√°ch t∆∞ v·∫•n vi√™n...</p>
      </div>
    );
  }

  return (
    <div style={{ padding: '24px', maxWidth: '1000px', margin: '0 auto' }}>
      {/* Header */}
      <div style={{ marginBottom: '32px', textAlign: 'center' }}>
        <Button 
          icon={<ArrowLeftOutlined />} 
          onClick={() => navigate('/appointments')}
          style={{ position: 'absolute', left: '24px', top: '24px' }}
        >
          Quay l·∫°i
        </Button>
        
        <Title level={1} style={{ marginBottom: '8px' }}>
          ƒê·∫∑t L·ªãch H·∫πn T∆∞ V·∫•n
        </Title>
        <Paragraph style={{ fontSize: '16px', color: '#666' }}>
          Ch·ªçn t∆∞ v·∫•n vi√™n v√† th·ªùi gian ph√π h·ª£p v·ªõi b·∫°n
        </Paragraph>
        
        {/* Demo Notice */}
        <Alert
          message="üé≠ Ch·∫ø ƒë·ªô Demo"
          description="ƒê√¢y l√† phi√™n b·∫£n demo v·ªõi d·ªØ li·ªáu m·∫´u. T·∫•t c·∫£ th√¥ng tin ƒë·ªÅu l√† gi·∫£ l·∫≠p."
          type="info"
          showIcon
          style={{ marginBottom: '16px', maxWidth: '600px', margin: '0 auto 16px auto' }}
        />
      </div>

      {step === 1 && (
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
        >
          {/* Step 1: Select Consultant */}
          <Card title="üîç Ch·ªçn T∆∞ V·∫•n Vi√™n" style={{ marginBottom: '24px' }}>
            <Row gutter={[16, 16]}>
              {consultants.map(consultant => (
                <Col xs={24} sm={12} lg={8} key={consultant.id}>
                  <Card
                    hoverable
                    style={{ 
                      height: '100%',
                      border: selectedConsultant?.id === consultant.id ? '2px solid #1890ff' : '1px solid #d9d9d9'
                    }}
                    onClick={() => handleSelectConsultant(consultant)}
                    cover={
                      <div style={{ padding: '16px', textAlign: 'center', background: '#f8f9fa' }}>
                        <Avatar size={64} src={consultant.avatar} icon={<UserOutlined />} />
                      </div>
                    }
                  >
                    <div style={{ textAlign: 'center', marginBottom: '12px' }}>
                      <Title level={5} style={{ margin: '8px 0' }}>
                        {consultant.firstName} {consultant.lastName}
                      </Title>
                      <Tag color="blue">{consultant.specialty}</Tag>
                      <div style={{ margin: '8px 0', color: '#666' }}>
                        <Text>‚≠ê {consultant.rating}/5.0</Text>
                        <Text style={{ margin: '0 8px' }}>‚Ä¢</Text>
                        <Text>{consultant.experience} nƒÉm kinh nghi·ªám</Text>
                      </div>
                    </div>
                    
                    {/* Consultant Description */}
                    <div style={{ marginBottom: '12px' }}>
                      <Text strong style={{ color: '#1890ff' }}>Chuy√™n m√¥n:</Text>
                      <br />
                      <Text style={{ fontSize: '14px', color: '#666' }}>
                        {consultant.description}
                      </Text>
                    </div>
                    
                    <div style={{ marginBottom: '8px' }}>
                      <Text strong>Email:</Text> <Text>{consultant.email}</Text>
                    </div>
                    
                    <div style={{ marginBottom: '12px' }}>
                      <Text strong>Kinh nghi·ªám:</Text> <Text>{consultant.experience} nƒÉm</Text>
                    </div>
                    
                    <div style={{ 
                      background: '#f6ffed', 
                      padding: '8px', 
                      borderRadius: '6px',
                      textAlign: 'center'
                    }}>
                      <Text strong style={{ color: '#52c41a' }}>
                        {consultant.price?.toLocaleString('vi-VN')}ƒë/bu·ªïi
                      </Text>
                    </div>
                    
                    {selectedConsultant?.id === consultant.id && (
                      <div style={{ 
                        marginTop: '8px',
                        padding: '8px',
                        background: '#e6f7ff',
                        borderRadius: '6px',
                        textAlign: 'center'
                      }}>
                        <Text style={{ color: '#1890ff', fontWeight: 'bold' }}>
                          ‚úì ƒê√£ ch·ªçn
                        </Text>
                      </div>
                    )}
                  </Card>
                </Col>
              ))}
            </Row>
          </Card>

          {/* Step 2: Select Date and Time */}
          {selectedConsultant && (
            <Card title="üìÖ Ch·ªçn Ng√†y v√† Gi·ªù" style={{ marginBottom: '24px' }}>
              <Row gutter={16}>
                <Col xs={24} md={12}>
                  <Form.Item
                    name="appointmentDate"
                    label="Ch·ªçn ng√†y"
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y!' }]}
                  >
                    <DatePicker
                      style={{ width: '100%' }}
                      placeholder="Ch·ªçn ng√†y t∆∞ v·∫•n"
                      disabledDate={disabledDate}
                      onChange={handleDateChange}
                      format="DD/MM/YYYY"
                    />
                  </Form.Item>
                  
                  {/* Calendar View */}
                  {selectedDate && (
                    <div style={{ marginTop: '16px' }}>
                      <Button 
                        type="link" 
                        onClick={() => setShowCalendar(!showCalendar)}
                        style={{ padding: 0 }}
                      >
                        {showCalendar ? '·∫®n l·ªãch' : 'Xem l·ªãch th√°ng'}
                      </Button>
                      
                      {showCalendar && (
                        <div style={{ marginTop: '8px', border: '1px solid #d9d9d9', borderRadius: '6px' }}>
                          <Calendar
                            fullscreen={false}
                            value={selectedDate}
                            onSelect={handleDateChange}
                            disabledDate={disabledDate}
                            dateCellRender={(date) => {
                              const isSelected = selectedDate && date.isSame(selectedDate, 'day');
                              const isDisabled = disabledDate(date);
                              
                              return (
                                <div style={{
                                  height: '100%',
                                  background: isSelected ? '#1890ff' : 'transparent',
                                  color: isSelected ? 'white' : isDisabled ? '#ccc' : 'inherit',
                                  borderRadius: '4px',
                                  display: 'flex',
                                  alignItems: 'center',
                                  justifyContent: 'center'
                                }}>
                                  {date.date()}
                                </div>
                              );
                            }}
                          />
                        </div>
                      )}
                    </div>
                  )}
                </Col>
                
                <Col xs={24} md={12}>
                  <Form.Item
                    name="appointmentTime"
                    label="Ch·ªçn gi·ªù"
                    rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn gi·ªù!' }]}
                  >
                    <Select
                      placeholder="Ch·ªçn khung gi·ªù"
                      loading={loadingSlots}
                      disabled={!selectedDate}
                      style={{ width: '100%' }}
                    >
                      {generateTimeSlots().map(slot => (
                        <Option 
                          key={slot.label} 
                          value={slot.value} 
                          disabled={slot.disabled}
                        >
                          <Space>
                            <span>{slot.label}</span>
                            {slot.disabled && <Badge status="error" text="ƒê√£ ƒë·∫∑t" />}
                            {!slot.disabled && <Badge status="success" text="Tr·ªëng" />}
                          </Space>
                        </Option>
                      ))}
                    </Select>
                  </Form.Item>
                  
                  {/* Available Slots Display */}
                  {selectedDate && availableSlots.length > 0 && (
                    <div style={{ 
                      background: '#f6ffed', 
                      padding: '12px', 
                      borderRadius: '6px',
                      marginTop: '8px'
                    }}>
                      <Text strong style={{ color: '#52c41a' }}>
                        Khung gi·ªù tr·ªëng: {availableSlots.length} slot
                      </Text>
                      <div style={{ marginTop: '8px' }}>
                        {availableSlots.slice(0, 6).map((slot, index) => (
                          <Tag key={index} color="green" style={{ margin: '2px' }}>
                            {slot.startTime}
                          </Tag>
                        ))}
                        {availableSlots.length > 6 && (
                          <Tag style={{ margin: '2px' }}>+{availableSlots.length - 6} kh√°c</Tag>
                        )}
                      </div>
                    </div>
                  )}
                  
                  {selectedDate && availableSlots.length === 0 && !loadingSlots && (
                    <Alert
                      message="Kh√¥ng c√≥ khung gi·ªù tr·ªëng"
                      description="Vui l√≤ng ch·ªçn ng√†y kh√°c ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp v·ªõi t∆∞ v·∫•n vi√™n"
                      type="warning"
                      showIcon
                      style={{ marginTop: '8px' }}
                    />
                  )}
                </Col>
              </Row>
            </Card>
          )}

          {/* Step 3: Appointment Details */}
          {selectedConsultant && selectedDate && (
            <Card title="üìù Th√¥ng Tin Cu·ªôc H·∫πn" style={{ marginBottom: '24px' }}>
              <Form.Item
                name="appointmentType"
                label="H√¨nh th·ª©c t∆∞ v·∫•n"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn h√¨nh th·ª©c t∆∞ v·∫•n!' }]}
                initialValue="ONLINE"
              >
                <Radio.Group>
                  <Radio value="ONLINE">üíª T∆∞ v·∫•n online qua google meet</Radio>
                </Radio.Group>
              </Form.Item>

              <Form.Item
                name="paymentMethod"
                label="Ph∆∞∆°ng th·ª©c thanh to√°n"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!' }]}
              >
                <Radio.Group>
                  <Radio value="VNPAY">üèß Thanh to√°n VNPay (s·∫Øp c√≥)</Radio>
                  <Radio value="BANK_TRANSFER">üè¶ Chuy·ªÉn kho·∫£n ng√¢n h√†ng</Radio>
                </Radio.Group>
              </Form.Item>

              <Form.Item
                name="notes"
                label="Ghi ch√∫ (t√πy ch·ªçn)"
              >
                <Input.TextArea 
                  rows={3} 
                  placeholder="M√¥ t·∫£ v·∫•n ƒë·ªÅ ho·∫∑c ghi ch√∫ ƒë·∫∑c bi·ªát..."
                />
              </Form.Item>

              <Form.Item style={{ marginBottom: 0, textAlign: 'center' }}>
                <Button 
                  type="primary" 
                  htmlType="submit" 
                  loading={loading}
                  size="large"
                  style={{ minWidth: '200px' }}
                >
                  ƒê·∫∑t l·ªãch h·∫πn
                </Button>
              </Form.Item>
            </Card>
          )}
        </Form>
      )}

      {/* Step 2: Result */}
      {step === 2 && (
        <Card style={{ textAlign: 'center', padding: '40px' }}>
          <div style={{ fontSize: '64px', marginBottom: '24px' }}>
            {result.includes('th√†nh c√¥ng') ? 'üéâ' : 'üòû'}
          </div>
          
          <Title level={2} style={{ 
            color: result.includes('th√†nh c√¥ng') ? '#52c41a' : '#f5222d',
            marginBottom: '16px'
          }}>
            {result}
          </Title>
          
          {result.includes('th√†nh c√¥ng') && (
            <div style={{ marginBottom: '32px' }}>
              <Paragraph style={{ fontSize: '16px', color: '#666' }}>
                L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn t∆∞ v·∫•n vi√™n. 
                B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c x√°c nh·∫≠n qua email trong th·ªùi gian s·ªõm nh·∫•t.
              </Paragraph>
              
              <Alert
                message="Th√¥ng tin quan tr·ªçng"
                description={
                  <div>
                    <p>‚Ä¢ T∆∞ v·∫•n vi√™n s·∫Ω x√°c nh·∫≠n l·ªãch h·∫πn trong v√≤ng 24 gi·ªù</p>
                    <p>‚Ä¢ B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c email th√¥ng b√°o khi l·ªãch h·∫πn ƒë∆∞·ª£c x√°c nh·∫≠n</p>
                    <p>‚Ä¢ C√≥ th·ªÉ h·ªßy ho·∫∑c ƒë·ªïi l·ªãch tr∆∞·ªõc 2 gi·ªù</p>
                  </div>
                }
                type="info"
                showIcon
                style={{ marginTop: '16px', textAlign: 'left' }}
              />
            </div>
          )}  
          
          <Space size="large">
            <Button 
              type="primary" 
              onClick={() => navigate('/appointments')}
              size="large"
            >
              Xem l·ªãch h·∫πn c·ªßa t√¥i
            </Button>
            
            <Button 
              onClick={() => {
                setStep(1);
                setSelectedConsultant(null);
                setSelectedDate(null);
                setAvailableSlots([]);
                setResult('');
                form.resetFields();
              }}
              size="large"
            >
              ƒê·∫∑t l·ªãch kh√°c
            </Button>
          </Space>
        </Card>
      )}

      {/* Emergency Contact */}
      <Card 
        title="üö® Li√™n H·ªá Kh·∫©n C·∫•p" 
        style={{ marginTop: '32px', background: '#fff2f0', border: '1px solid #ffccc7' }}
      >
        <Row gutter={16}>
          <Col xs={24} sm={12}>
            <Space>
              <PhoneOutlined style={{ color: '#f5222d' }} />
              <div>
                <Text strong>Hotline 24/7:</Text>
                <br />
                <Text copyable style={{ fontSize: '18px', color: '#f5222d' }}>1900 1234</Text>
              </div>
            </Space>
          </Col>
          <Col xs={24} sm={12}>
            <Space>
              <MailOutlined style={{ color: '#f5222d' }} />
              <div>
                <Text strong>Email kh·∫©n c·∫•p:</Text>
                <br />
                <Text copyable>emergency@drugprevention.vn</Text>
              </div>
            </Space>
          </Col>
        </Row>
      </Card>
    </div>
  );
}

export default BookAppointmentPage;